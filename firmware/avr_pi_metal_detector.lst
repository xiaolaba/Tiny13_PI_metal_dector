
firmware\avr_pi_metal_detector.out:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000de  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060d  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000040c  00000000  00000000  000007f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001af  00000000  00000000  00000c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000266  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c4  00000000  00000000  0000104a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000130e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	15 d0       	rcall	.+42     	; 0x48 <main>
  1e:	5d c0       	rjmp	.+186    	; 0xda <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <measure_decay>:
static uint16_t
measure_decay(void)
{
    uint16_t i, counter = 0, decay = 0;

    PORTB |= _BV(COIL_PIN); // pulse on
  22:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  24:	46 e6       	ldi	r20, 0x66	; 102
  26:	4a 95       	dec	r20
  28:	f1 f7       	brne	.-4      	; 0x26 <measure_decay+0x4>
  2a:	00 c0       	rjmp	.+0      	; 0x2c <measure_decay+0xa>
    _delay_us(PULSE_WIDTH); // pulse delay
    PORTB &= ~_BV(COIL_PIN); // pulse off
  2c:	c2 98       	cbi	0x18, 2	; 24


static uint16_t
measure_decay(void)
{
    uint16_t i, counter = 0, decay = 0;
  2e:	80 e0       	ldi	r24, 0x00	; 0
  30:	90 e0       	ldi	r25, 0x00	; 0

    PORTB |= _BV(COIL_PIN); // pulse on
    _delay_us(PULSE_WIDTH); // pulse delay
    PORTB &= ~_BV(COIL_PIN); // pulse off

    for (i = 0; i < MEASUREMENT_ATTEMPTS_MAX; ++i) {
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	30 e0       	ldi	r19, 0x00	; 0
        if (ACSR & _BV(ACO)) {
  36:	45 99       	sbic	0x08, 5	; 8
  38:	c9 01       	movw	r24, r18

    PORTB |= _BV(COIL_PIN); // pulse on
    _delay_us(PULSE_WIDTH); // pulse delay
    PORTB &= ~_BV(COIL_PIN); // pulse off

    for (i = 0; i < MEASUREMENT_ATTEMPTS_MAX; ++i) {
  3a:	2f 5f       	subi	r18, 0xFF	; 255
  3c:	3f 4f       	sbci	r19, 0xFF	; 255
  3e:	21 15       	cp	r18, r1
  40:	48 e0       	ldi	r20, 0x08	; 8
  42:	34 07       	cpc	r19, r20
  44:	c1 f7       	brne	.-16     	; 0x36 <measure_decay+0x14>
        }
        counter++;
    }

    return decay;
}
  46:	08 95       	ret

00000048 <main>:
main(void)
{
    uint16_t decay_cur, decay_max;

    /* setup */
    DDRB = _BV(COIL_PIN)|_BV(LED_PIN)|_BV(BUZZER_PIN); // set COIL, LED and BUZZER pins as output
  48:	8c e1       	ldi	r24, 0x1C	; 28
  4a:	87 bb       	out	0x17, r24	; 23
    ACSR = 0; // clear register
  4c:	18 b8       	out	0x08, r1	; 8
{
    uint8_t i;
    uint16_t tmp, decay = 0;

    /* calibration process */
    for (i = 0; i < CALIBRATION_ATTEMPTS_MAX; ++i) {
  4e:	10 e0       	ldi	r17, 0x00	; 0

static uint16_t
calibration(void)
{
    uint8_t i;
    uint16_t tmp, decay = 0;
  50:	c0 e0       	ldi	r28, 0x00	; 0
  52:	d0 e0       	ldi	r29, 0x00	; 0

    /* calibration process */
    for (i = 0; i < CALIBRATION_ATTEMPTS_MAX; ++i) {
        tmp = measure_decay();
  54:	e6 df       	rcall	.-52     	; 0x22 <measure_decay>
  56:	c8 17       	cp	r28, r24
  58:	d9 07       	cpc	r29, r25
  5a:	08 f4       	brcc	.+2      	; 0x5e <main+0x16>
  5c:	ec 01       	movw	r28, r24
{
    uint8_t i;
    uint16_t tmp, decay = 0;

    /* calibration process */
    for (i = 0; i < CALIBRATION_ATTEMPTS_MAX; ++i) {
  5e:	1f 5f       	subi	r17, 0xFF	; 255
  60:	10 38       	cpi	r17, 0x80	; 128
  62:	c1 f7       	brne	.-16     	; 0x54 <main+0xc>
  64:	23 e0       	ldi	r18, 0x03	; 3

static uint16_t
calibration(void)
{
    uint8_t i;
    uint16_t tmp, decay = 0;
  66:	80 e4       	ldi	r24, 0x40	; 64
  68:	90 e0       	ldi	r25, 0x00	; 0
    }

    /* signalize end of calibration */
    for (i = 0; i < 3; ++i) {
        for (tmp = 0; tmp < 64; ++tmp) {
            SIGNAL_ON();
  6a:	38 b3       	in	r19, 0x18	; 24
  6c:	38 61       	ori	r19, 0x18	; 24
  6e:	38 bb       	out	0x18, r19	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	ef ec       	ldi	r30, 0xCF	; 207
  72:	f2 e0       	ldi	r31, 0x02	; 2
  74:	31 97       	sbiw	r30, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <main+0x2c>
  78:	00 c0       	rjmp	.+0      	; 0x7a <main+0x32>
  7a:	00 00       	nop
            _delay_ms(0.3);
            SIGNAL_OFF();
  7c:	38 b3       	in	r19, 0x18	; 24
  7e:	37 7e       	andi	r19, 0xE7	; 231
  80:	38 bb       	out	0x18, r19	; 24
  82:	ef ec       	ldi	r30, 0xCF	; 207
  84:	f2 e0       	ldi	r31, 0x02	; 2
  86:	31 97       	sbiw	r30, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <main+0x3e>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x44>
  8c:	00 00       	nop
  8e:	01 97       	sbiw	r24, 0x01	; 1
        }
    }

    /* signalize end of calibration */
    for (i = 0; i < 3; ++i) {
        for (tmp = 0; tmp < 64; ++tmp) {
  90:	61 f7       	brne	.-40     	; 0x6a <main+0x22>
  92:	ff ef       	ldi	r31, 0xFF	; 255
  94:	3f ed       	ldi	r19, 0xDF	; 223
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	f1 50       	subi	r31, 0x01	; 1
  9a:	30 40       	sbci	r19, 0x00	; 0
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x50>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <__stack+0x3>
  a2:	00 00       	nop
  a4:	21 50       	subi	r18, 0x01	; 1
            decay = tmp;
        }
    }

    /* signalize end of calibration */
    for (i = 0; i < 3; ++i) {
  a6:	f9 f6       	brne	.-66     	; 0x66 <main+0x1e>

    /* setup */
    DDRB = _BV(COIL_PIN)|_BV(LED_PIN)|_BV(BUZZER_PIN); // set COIL, LED and BUZZER pins as output
    ACSR = 0; // clear register

    decay_max = calibration() - 2;
  a8:	22 97       	sbiw	r28, 0x02	; 2
  aa:	9f ef       	ldi	r25, 0xFF	; 255
  ac:	e5 ea       	ldi	r30, 0xA5	; 165
  ae:	fe e0       	ldi	r31, 0x0E	; 14
  b0:	91 50       	subi	r25, 0x01	; 1
  b2:	e0 40       	sbci	r30, 0x00	; 0
  b4:	f0 40       	sbci	r31, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <__stack+0x11>
  b8:	00 c0       	rjmp	.+0      	; 0xba <__stack+0x1b>
  ba:	00 00       	nop
    _delay_ms(500);

    /* loop */
    while (1) {
        decay_cur = measure_decay();
  bc:	b2 df       	rcall	.-156    	; 0x22 <measure_decay>
        if (decay_cur < decay_max) {
  be:	8c 17       	cp	r24, r28
  c0:	9d 07       	cpc	r25, r29
  c2:	38 f4       	brcc	.+14     	; 0xd2 <__stack+0x33>
            SIGNAL_ON();
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	88 61       	ori	r24, 0x18	; 24
  c8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	80 ef       	ldi	r24, 0xF0	; 240
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <__stack+0x2f>
            _delay_us(100);
        }
        SIGNAL_OFF();
  d2:	88 b3       	in	r24, 0x18	; 24
  d4:	87 7e       	andi	r24, 0xE7	; 231
  d6:	88 bb       	out	0x18, r24	; 24
    }
  d8:	f1 cf       	rjmp	.-30     	; 0xbc <__stack+0x1d>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
