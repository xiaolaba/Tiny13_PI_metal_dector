
firmware\avr_pi_metal_detector.out:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000354  00000000  00000000  0000016f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000015a  00000000  00000000  000004c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001f7  00000000  00000000  0000061d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000814  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000138  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000144  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d8  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	15 d0       	rcall	.+42     	; 0x48 <main>
  1e:	5e c0       	rjmp	.+188    	; 0xdc <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <measure_decay>:
static uint16_t
measure_decay(void)
{
    uint16_t i, counter = 0, decay = 0;

    PORTB |= _BV(COIL_PIN); // pulse on
  22:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  24:	8a e0       	ldi	r24, 0x0A	; 10
  26:	8a 95       	dec	r24
  28:	f1 f7       	brne	.-4      	; 0x26 <measure_decay+0x4>
    _delay_us(PULSE_WIDTH); // pulse delay
    PORTB &= ~_BV(COIL_PIN); // pulse off
  2a:	c2 98       	cbi	0x18, 2	; 24
  2c:	20 e0       	ldi	r18, 0x00	; 0
  2e:	30 e0       	ldi	r19, 0x00	; 0
  30:	40 e0       	ldi	r20, 0x00	; 0
  32:	50 e0       	ldi	r21, 0x00	; 0

    for (i = 0; i < MEASUREMENT_ATTEMPTS_MAX; ++i) {
        if (ACSR & _BV(ACO)) {
  34:	45 99       	sbic	0x08, 5	; 8
  36:	a9 01       	movw	r20, r18

    PORTB |= _BV(COIL_PIN); // pulse on
    _delay_us(PULSE_WIDTH); // pulse delay
    PORTB &= ~_BV(COIL_PIN); // pulse off

    for (i = 0; i < MEASUREMENT_ATTEMPTS_MAX; ++i) {
  38:	2f 5f       	subi	r18, 0xFF	; 255
  3a:	3f 4f       	sbci	r19, 0xFF	; 255
  3c:	88 e0       	ldi	r24, 0x08	; 8
  3e:	20 30       	cpi	r18, 0x00	; 0
  40:	38 07       	cpc	r19, r24
  42:	c1 f7       	brne	.-16     	; 0x34 <__CCP__>
        }
        counter++;
    }

    return decay;
}
  44:	ca 01       	movw	r24, r20
  46:	08 95       	ret

00000048 <main>:
    return decay;
}

int
main(void)
{
  48:	1f 93       	push	r17
  4a:	cf 93       	push	r28
  4c:	df 93       	push	r29
    uint16_t decay_cur, decay_max;

    /* setup */
    DDRB = _BV(COIL_PIN)|_BV(LED_PIN)|_BV(BUZZER_PIN); // set COIL, LED and BUZZER pins as output
  4e:	8c e1       	ldi	r24, 0x1C	; 28
  50:	87 bb       	out	0x17, r24	; 23
    ACSR = 0; // clear register
  52:	18 b8       	out	0x08, r1	; 8
  54:	c0 e0       	ldi	r28, 0x00	; 0
  56:	d0 e0       	ldi	r29, 0x00	; 0
  58:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t i;
    uint16_t tmp, decay = 0;

    /* calibration process */
    for (i = 0; i < CALIBRATION_ATTEMPTS_MAX; ++i) {
        tmp = measure_decay();
  5a:	e3 df       	rcall	.-58     	; 0x22 <measure_decay>
  5c:	c8 17       	cp	r28, r24
  5e:	d9 07       	cpc	r29, r25
  60:	08 f4       	brcc	.+2      	; 0x64 <main+0x1c>
  62:	ec 01       	movw	r28, r24
{
    uint8_t i;
    uint16_t tmp, decay = 0;

    /* calibration process */
    for (i = 0; i < CALIBRATION_ATTEMPTS_MAX; ++i) {
  64:	1f 5f       	subi	r17, 0xFF	; 255
  66:	10 38       	cpi	r17, 0x80	; 128
  68:	c1 f7       	brne	.-16     	; 0x5a <main+0x12>
  6a:	40 e0       	ldi	r20, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  6c:	6b e4       	ldi	r22, 0x4B	; 75
  6e:	70 e0       	ldi	r23, 0x00	; 0
    }

    /* signalize end of calibration */
    for (i = 0; i < 3; ++i) {
        for (tmp = 0; tmp < 64; ++tmp) {
            SIGNAL_ON();
  70:	e0 e8       	ldi	r30, 0x80	; 128
  72:	fe e3       	ldi	r31, 0x3E	; 62
  74:	17 c0       	rjmp	.+46     	; 0xa4 <__stack+0x5>
  76:	88 b3       	in	r24, 0x18	; 24
  78:	88 61       	ori	r24, 0x18	; 24
  7a:	88 bb       	out	0x18, r24	; 24
  7c:	cb 01       	movw	r24, r22
  7e:	01 97       	sbiw	r24, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <main+0x36>
            _delay_ms(0.3);
            SIGNAL_OFF();
  82:	88 b3       	in	r24, 0x18	; 24
  84:	87 7e       	andi	r24, 0xE7	; 231
  86:	88 bb       	out	0x18, r24	; 24
  88:	cb 01       	movw	r24, r22
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <main+0x42>
        }
    }

    /* signalize end of calibration */
    for (i = 0; i < 3; ++i) {
        for (tmp = 0; tmp < 64; ++tmp) {
  8e:	2f 5f       	subi	r18, 0xFF	; 255
  90:	3f 4f       	sbci	r19, 0xFF	; 255
  92:	20 34       	cpi	r18, 0x40	; 64
  94:	31 05       	cpc	r19, r1
  96:	79 f7       	brne	.-34     	; 0x76 <main+0x2e>
  98:	cf 01       	movw	r24, r30
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <main+0x52>
            decay = tmp;
        }
    }

    /* signalize end of calibration */
    for (i = 0; i < 3; ++i) {
  9e:	4f 5f       	subi	r20, 0xFF	; 255
  a0:	43 30       	cpi	r20, 0x03	; 3
  a2:	19 f0       	breq	.+6      	; 0xaa <__stack+0xb>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	e6 cf       	rjmp	.-52     	; 0x76 <main+0x2e>

    /* setup */
    DDRB = _BV(COIL_PIN)|_BV(LED_PIN)|_BV(BUZZER_PIN); // set COIL, LED and BUZZER pins as output
    ACSR = 0; // clear register

    decay_max = calibration() - 2;
  aa:	22 97       	sbiw	r28, 0x02	; 2
  ac:	88 e8       	ldi	r24, 0x88	; 136
  ae:	93 e1       	ldi	r25, 0x13	; 19
  b0:	29 e1       	ldi	r18, 0x19	; 25
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <__stack+0x17>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__stack+0x15>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  be:	11 e2       	ldi	r17, 0x21	; 33
    _delay_ms(500);

    /* loop */
    while (1) {
        decay_cur = measure_decay();
  c0:	b0 df       	rcall	.-160    	; 0x22 <measure_decay>
        if (decay_cur < decay_max) {
  c2:	8c 17       	cp	r24, r28
  c4:	9d 07       	cpc	r25, r29
  c6:	30 f4       	brcc	.+12     	; 0xd4 <__stack+0x35>
            SIGNAL_ON();
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	88 61       	ori	r24, 0x18	; 24
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	81 2f       	mov	r24, r17
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <__stack+0x31>
            _delay_us(100);
        }
        SIGNAL_OFF();
  d4:	88 b3       	in	r24, 0x18	; 24
  d6:	87 7e       	andi	r24, 0xE7	; 231
  d8:	88 bb       	out	0x18, r24	; 24
  da:	f2 cf       	rjmp	.-28     	; 0xc0 <__stack+0x21>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
